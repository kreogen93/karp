# Вы, наверно, заметили, что при наследовании в прошлом задании мы переписали почти всю логику.
# Это плохо: при наследовании нужно расширять класс, а не переписывать его.
# Но все же хочется использовать наследование, ведь треугольники и прямоугольники имеют общие свойства:
# Оба характеризуются количеством точек n_dots.
# Оба имеют метод area().
# Оба имеют проверки на валидность данных. В случае прямоугольника это было равенство противоположных сторон,
# которое мы пропустили благодаря трюку: вместо принятия четырех сторон a, b, c, d на вход
# мы принимали две и далее держали в уме a=c, b=d. В случае треугольника это было неравенство треугольника.
# Тут нам поможет создание некой "базовой фигуры". Это будет сборник общих свойств,
# который сам по себе не будет представлять никакую фигуру, но послужит хорошим плацдармом для следующих классов.
# Напишите класс BaseFigure, который имеет поле класса (т.е. на уровне класса) n_dots = None,
# метод area() "без реализации", метод validate() "без реализации". Сделайте так, чтобы методы "без реализации"
# выбрасывали исключение NotImplementedError при их вызове и ничего другого не делали.
# Создайте также конструктор класса, который не принимает дополнительных аргументов и в реализации только лишь
# вызывает self.validate().


class BaseFigure:
    n_dots = None

    def area(self):
        raise NotImplementedError()

    def validate(self):
        raise NotImplementedError()

    def __init__(self):
        self.validate()